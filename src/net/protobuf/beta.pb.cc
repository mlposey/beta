// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beta.proto

#include "beta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace betagrpc {
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node>
      _instance;
} _Node_default_instance_;
class RouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Route>
      _instance;
} _Route_default_instance_;
class RouteQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteQuery>
      _instance;
} _RouteQuery_default_instance_;
class AddResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddResponse>
      _instance;
} _AddResponse_default_instance_;
}  // namespace betagrpc
namespace protobuf_beta_2eproto {
void InitDefaultsNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::betagrpc::_Node_default_instance_;
    new (ptr) ::betagrpc::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::betagrpc::Node::InitAsDefaultInstance();
}

void InitDefaultsNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeImpl);
}

void InitDefaultsRouteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_beta_2eproto::InitDefaultsNode();
  {
    void* ptr = &::betagrpc::_Route_default_instance_;
    new (ptr) ::betagrpc::Route();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::betagrpc::Route::InitAsDefaultInstance();
}

void InitDefaultsRoute() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteImpl);
}

void InitDefaultsRouteQueryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_beta_2eproto::InitDefaultsNode();
  {
    void* ptr = &::betagrpc::_RouteQuery_default_instance_;
    new (ptr) ::betagrpc::RouteQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::betagrpc::RouteQuery::InitAsDefaultInstance();
}

void InitDefaultsRouteQuery() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteQueryImpl);
}

void InitDefaultsAddResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::betagrpc::_AddResponse_default_instance_;
    new (ptr) ::betagrpc::AddResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::betagrpc::AddResponse::InitAsDefaultInstance();
}

void InitDefaultsAddResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::Node, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::Node, longitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::Route, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::Route, distance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::RouteQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::RouteQuery, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::RouteQuery, destination_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::betagrpc::AddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::betagrpc::Node)},
  { 7, -1, sizeof(::betagrpc::Route)},
  { 14, -1, sizeof(::betagrpc::RouteQuery)},
  { 21, -1, sizeof(::betagrpc::AddResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::betagrpc::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::betagrpc::_Route_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::betagrpc::_RouteQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::betagrpc::_AddResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "beta.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nbeta.proto\022\010betagrpc\"+\n\004Node\022\020\n\010latitu"
      "de\030\001 \001(\002\022\021\n\tlongitude\030\002 \001(\002\"8\n\005Route\022\035\n\005"
      "nodes\030\001 \003(\0132\016.betagrpc.Node\022\020\n\010distance\030"
      "\002 \001(\001\"Q\n\nRouteQuery\022\036\n\006origin\030\001 \001(\0132\016.be"
      "tagrpc.Node\022#\n\013destination\030\002 \001(\0132\016.betag"
      "rpc.Node\"\r\n\013AddResponse2\252\001\n\004Beta\0223\n\010GetR"
      "oute\022\024.betagrpc.RouteQuery\032\017.betagrpc.Ro"
      "ute\"\000\0227\n\014MustGetRoute\022\024.betagrpc.RouteQu"
      "ery\032\017.betagrpc.Route\"\000\0224\n\010AddRoute\022\017.bet"
      "agrpc.Route\032\025.betagrpc.AddResponse\"\000b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 404);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "beta.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_beta_2eproto
namespace betagrpc {

// ===================================================================

void Node::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kLatitudeFieldNumber;
const int Node::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_beta_2eproto::InitDefaultsNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:betagrpc.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:betagrpc.Node)
}

void Node::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:betagrpc.Node)
  SharedDtor();
}

void Node::SharedDtor() {
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  ::protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  ::protobuf_beta_2eproto::InitDefaultsNode();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:betagrpc.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:betagrpc.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:betagrpc.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:betagrpc.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:betagrpc.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:betagrpc.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:betagrpc.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:betagrpc.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:betagrpc.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:betagrpc.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:betagrpc.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:betagrpc.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:betagrpc.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:betagrpc.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:betagrpc.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Route::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Route::kNodesFieldNumber;
const int Route::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Route::Route()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_beta_2eproto::InitDefaultsRoute();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:betagrpc.Route)
}
Route::Route(const Route& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:betagrpc.Route)
}

void Route::SharedCtor() {
  distance_ = 0;
  _cached_size_ = 0;
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:betagrpc.Route)
  SharedDtor();
}

void Route::SharedDtor() {
}

void Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Route::descriptor() {
  ::protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Route& Route::default_instance() {
  ::protobuf_beta_2eproto::InitDefaultsRoute();
  return *internal_default_instance();
}

Route* Route::New(::google::protobuf::Arena* arena) const {
  Route* n = new Route;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:betagrpc.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  distance_ = 0;
  _internal_metadata_.Clear();
}

bool Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:betagrpc.Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .betagrpc.Node nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:betagrpc.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:betagrpc.Route)
  return false;
#undef DO_
}

void Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:betagrpc.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .betagrpc.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(static_cast<int>(i)), output);
  }

  // double distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:betagrpc.Route)
}

::google::protobuf::uint8* Route::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:betagrpc.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .betagrpc.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  // double distance = 2;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:betagrpc.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:betagrpc.Route)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .betagrpc.Node nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // double distance = 2;
  if (this->distance() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Route::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:betagrpc.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Route>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:betagrpc.Route)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:betagrpc.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:betagrpc.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void Route::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:betagrpc.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:betagrpc.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::Swap(Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Route::InternalSwap(Route* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  swap(distance_, other->distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Route::GetMetadata() const {
  protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteQuery::InitAsDefaultInstance() {
  ::betagrpc::_RouteQuery_default_instance_._instance.get_mutable()->origin_ = const_cast< ::betagrpc::Node*>(
      ::betagrpc::Node::internal_default_instance());
  ::betagrpc::_RouteQuery_default_instance_._instance.get_mutable()->destination_ = const_cast< ::betagrpc::Node*>(
      ::betagrpc::Node::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteQuery::kOriginFieldNumber;
const int RouteQuery::kDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteQuery::RouteQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_beta_2eproto::InitDefaultsRouteQuery();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:betagrpc.RouteQuery)
}
RouteQuery::RouteQuery(const RouteQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::betagrpc::Node(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_destination()) {
    destination_ = new ::betagrpc::Node(*from.destination_);
  } else {
    destination_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:betagrpc.RouteQuery)
}

void RouteQuery::SharedCtor() {
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(destination_));
  _cached_size_ = 0;
}

RouteQuery::~RouteQuery() {
  // @@protoc_insertion_point(destructor:betagrpc.RouteQuery)
  SharedDtor();
}

void RouteQuery::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete destination_;
}

void RouteQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteQuery::descriptor() {
  ::protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteQuery& RouteQuery::default_instance() {
  ::protobuf_beta_2eproto::InitDefaultsRouteQuery();
  return *internal_default_instance();
}

RouteQuery* RouteQuery::New(::google::protobuf::Arena* arena) const {
  RouteQuery* n = new RouteQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:betagrpc.RouteQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
  _internal_metadata_.Clear();
}

bool RouteQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:betagrpc.RouteQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .betagrpc.Node origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .betagrpc.Node destination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:betagrpc.RouteQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:betagrpc.RouteQuery)
  return false;
#undef DO_
}

void RouteQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:betagrpc.RouteQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .betagrpc.Node origin = 1;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // .betagrpc.Node destination = 2;
  if (this->has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:betagrpc.RouteQuery)
}

::google::protobuf::uint8* RouteQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:betagrpc.RouteQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .betagrpc.Node origin = 1;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->origin_, deterministic, target);
  }

  // .betagrpc.Node destination = 2;
  if (this->has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->destination_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:betagrpc.RouteQuery)
  return target;
}

size_t RouteQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:betagrpc.RouteQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .betagrpc.Node origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->origin_);
  }

  // .betagrpc.Node destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:betagrpc.RouteQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:betagrpc.RouteQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:betagrpc.RouteQuery)
    MergeFrom(*source);
  }
}

void RouteQuery::MergeFrom(const RouteQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:betagrpc.RouteQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_origin()) {
    mutable_origin()->::betagrpc::Node::MergeFrom(from.origin());
  }
  if (from.has_destination()) {
    mutable_destination()->::betagrpc::Node::MergeFrom(from.destination());
  }
}

void RouteQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:betagrpc.RouteQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteQuery::CopyFrom(const RouteQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:betagrpc.RouteQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteQuery::IsInitialized() const {
  return true;
}

void RouteQuery::Swap(RouteQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteQuery::InternalSwap(RouteQuery* other) {
  using std::swap;
  swap(origin_, other->origin_);
  swap(destination_, other->destination_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteQuery::GetMetadata() const {
  protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddResponse::AddResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_beta_2eproto::InitDefaultsAddResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:betagrpc.AddResponse)
}
AddResponse::AddResponse(const AddResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:betagrpc.AddResponse)
}

void AddResponse::SharedCtor() {
  _cached_size_ = 0;
}

AddResponse::~AddResponse() {
  // @@protoc_insertion_point(destructor:betagrpc.AddResponse)
  SharedDtor();
}

void AddResponse::SharedDtor() {
}

void AddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddResponse::descriptor() {
  ::protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddResponse& AddResponse::default_instance() {
  ::protobuf_beta_2eproto::InitDefaultsAddResponse();
  return *internal_default_instance();
}

AddResponse* AddResponse::New(::google::protobuf::Arena* arena) const {
  AddResponse* n = new AddResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:betagrpc.AddResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:betagrpc.AddResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:betagrpc.AddResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:betagrpc.AddResponse)
  return false;
#undef DO_
}

void AddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:betagrpc.AddResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:betagrpc.AddResponse)
}

::google::protobuf::uint8* AddResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:betagrpc.AddResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:betagrpc.AddResponse)
  return target;
}

size_t AddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:betagrpc.AddResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:betagrpc.AddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:betagrpc.AddResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:betagrpc.AddResponse)
    MergeFrom(*source);
  }
}

void AddResponse::MergeFrom(const AddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:betagrpc.AddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:betagrpc.AddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResponse::CopyFrom(const AddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:betagrpc.AddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResponse::IsInitialized() const {
  return true;
}

void AddResponse::Swap(AddResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddResponse::InternalSwap(AddResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddResponse::GetMetadata() const {
  protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace betagrpc

// @@protoc_insertion_point(global_scope)
