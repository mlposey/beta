// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: beta.proto
#ifndef GRPC_beta_2eproto__INCLUDED
#define GRPC_beta_2eproto__INCLUDED

#include "beta.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace betagrpc {

class Beta final {
 public:
  static constexpr char const* service_full_name() {
    return "betagrpc.Beta";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // GetRoute retrieves a route that answers the given query.
    //
    // This RPC will invoke the cache for a route that matches the
    // query. It will fail if the cache could not fulfill the request.
    virtual ::grpc::Status GetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::betagrpc::Route* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>> AsyncGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>>(AsyncGetRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>> PrepareAsyncGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>>(PrepareAsyncGetRouteRaw(context, request, cq));
    }
    // *
    // MustGetRoute retrieves a route that answers the given query.
    //
    // This RPC will use a cache invocation to resolve the request and
    // if unsuccessful, it will default to a configured path provider
    // for the answer. That route will then be cached and returned.
    //
    // It is possible that the provider will not have the answer either.
    // Under that circumstance, the operation will fail.
    virtual ::grpc::Status MustGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::betagrpc::Route* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>> AsyncMustGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>>(AsyncMustGetRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>> PrepareAsyncMustGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>>(PrepareAsyncMustGetRouteRaw(context, request, cq));
    }
    // *
    // AddRoute adds a route to the cache.
    //
    // Currently, the system does not assess the uniqueness of the given
    // route. One should take care to only add routes which are not subpaths
    // of any route in the current cache. Until a solution is implemented,
    // default to MustGetRoute to guarantee an optimal cache.
    virtual ::grpc::Status AddRoute(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::betagrpc::AddResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::AddResponse>> AsyncAddRoute(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::AddResponse>>(AsyncAddRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::AddResponse>> PrepareAsyncAddRoute(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::AddResponse>>(PrepareAsyncAddRouteRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>* AsyncGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>* PrepareAsyncGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>* AsyncMustGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::Route>* PrepareAsyncMustGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::AddResponse>* AsyncAddRouteRaw(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::betagrpc::AddResponse>* PrepareAsyncAddRouteRaw(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::betagrpc::Route* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>> AsyncGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>>(AsyncGetRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>> PrepareAsyncGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>>(PrepareAsyncGetRouteRaw(context, request, cq));
    }
    ::grpc::Status MustGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::betagrpc::Route* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>> AsyncMustGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>>(AsyncMustGetRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>> PrepareAsyncMustGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>>(PrepareAsyncMustGetRouteRaw(context, request, cq));
    }
    ::grpc::Status AddRoute(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::betagrpc::AddResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::AddResponse>> AsyncAddRoute(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::AddResponse>>(AsyncAddRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::AddResponse>> PrepareAsyncAddRoute(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::betagrpc::AddResponse>>(PrepareAsyncAddRouteRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>* AsyncGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>* PrepareAsyncGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>* AsyncMustGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::betagrpc::Route>* PrepareAsyncMustGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::betagrpc::AddResponse>* AsyncAddRouteRaw(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::betagrpc::AddResponse>* PrepareAsyncAddRouteRaw(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetRoute_;
    const ::grpc::internal::RpcMethod rpcmethod_MustGetRoute_;
    const ::grpc::internal::RpcMethod rpcmethod_AddRoute_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // GetRoute retrieves a route that answers the given query.
    //
    // This RPC will invoke the cache for a route that matches the
    // query. It will fail if the cache could not fulfill the request.
    virtual ::grpc::Status GetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response);
    // *
    // MustGetRoute retrieves a route that answers the given query.
    //
    // This RPC will use a cache invocation to resolve the request and
    // if unsuccessful, it will default to a configured path provider
    // for the answer. That route will then be cached and returned.
    //
    // It is possible that the provider will not have the answer either.
    // Under that circumstance, the operation will fail.
    virtual ::grpc::Status MustGetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response);
    // *
    // AddRoute adds a route to the cache.
    //
    // Currently, the system does not assess the uniqueness of the given
    // route. One should take care to only add routes which are not subpaths
    // of any route in the current cache. Until a solution is implemented,
    // default to MustGetRoute to guarantee an optimal cache.
    virtual ::grpc::Status AddRoute(::grpc::ServerContext* context, const ::betagrpc::Route* request, ::betagrpc::AddResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRoute() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoute(::grpc::ServerContext* context, ::betagrpc::RouteQuery* request, ::grpc::ServerAsyncResponseWriter< ::betagrpc::Route>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MustGetRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MustGetRoute() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MustGetRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MustGetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMustGetRoute(::grpc::ServerContext* context, ::betagrpc::RouteQuery* request, ::grpc::ServerAsyncResponseWriter< ::betagrpc::Route>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddRoute() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoute(::grpc::ServerContext* context, const ::betagrpc::Route* request, ::betagrpc::AddResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRoute(::grpc::ServerContext* context, ::betagrpc::Route* request, ::grpc::ServerAsyncResponseWriter< ::betagrpc::AddResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetRoute<WithAsyncMethod_MustGetRoute<WithAsyncMethod_AddRoute<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRoute() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MustGetRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MustGetRoute() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MustGetRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MustGetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddRoute() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoute(::grpc::ServerContext* context, const ::betagrpc::Route* request, ::betagrpc::AddResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRoute() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::betagrpc::RouteQuery, ::betagrpc::Route>(std::bind(&WithStreamedUnaryMethod_GetRoute<BaseClass>::StreamedGetRoute, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRoute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::betagrpc::RouteQuery,::betagrpc::Route>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MustGetRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MustGetRoute() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::betagrpc::RouteQuery, ::betagrpc::Route>(std::bind(&WithStreamedUnaryMethod_MustGetRoute<BaseClass>::StreamedMustGetRoute, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MustGetRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MustGetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMustGetRoute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::betagrpc::RouteQuery,::betagrpc::Route>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddRoute() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::betagrpc::Route, ::betagrpc::AddResponse>(std::bind(&WithStreamedUnaryMethod_AddRoute<BaseClass>::StreamedAddRoute, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRoute(::grpc::ServerContext* context, const ::betagrpc::Route* request, ::betagrpc::AddResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRoute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::betagrpc::Route,::betagrpc::AddResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetRoute<WithStreamedUnaryMethod_MustGetRoute<WithStreamedUnaryMethod_AddRoute<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetRoute<WithStreamedUnaryMethod_MustGetRoute<WithStreamedUnaryMethod_AddRoute<Service > > > StreamedService;
};

}  // namespace betagrpc


#endif  // GRPC_beta_2eproto__INCLUDED
