// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: beta.proto

#include "beta.pb.h"
#include "beta.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace betagrpc {

static const char* Beta_method_names[] = {
  "/betagrpc.Beta/GetRoute",
  "/betagrpc.Beta/MustGetRoute",
  "/betagrpc.Beta/AddRoute",
};

std::unique_ptr< Beta::Stub> Beta::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Beta::Stub> stub(new Beta::Stub(channel));
  return stub;
}

Beta::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetRoute_(Beta_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MustGetRoute_(Beta_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRoute_(Beta_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Beta::Stub::GetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::betagrpc::Route* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRoute_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::betagrpc::Route>* Beta::Stub::AsyncGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::betagrpc::Route>::Create(channel_.get(), cq, rpcmethod_GetRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::betagrpc::Route>* Beta::Stub::PrepareAsyncGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::betagrpc::Route>::Create(channel_.get(), cq, rpcmethod_GetRoute_, context, request, false);
}

::grpc::Status Beta::Stub::MustGetRoute(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::betagrpc::Route* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MustGetRoute_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::betagrpc::Route>* Beta::Stub::AsyncMustGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::betagrpc::Route>::Create(channel_.get(), cq, rpcmethod_MustGetRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::betagrpc::Route>* Beta::Stub::PrepareAsyncMustGetRouteRaw(::grpc::ClientContext* context, const ::betagrpc::RouteQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::betagrpc::Route>::Create(channel_.get(), cq, rpcmethod_MustGetRoute_, context, request, false);
}

::grpc::Status Beta::Stub::AddRoute(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::betagrpc::AddResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddRoute_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::betagrpc::AddResponse>* Beta::Stub::AsyncAddRouteRaw(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::betagrpc::AddResponse>::Create(channel_.get(), cq, rpcmethod_AddRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::betagrpc::AddResponse>* Beta::Stub::PrepareAsyncAddRouteRaw(::grpc::ClientContext* context, const ::betagrpc::Route& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::betagrpc::AddResponse>::Create(channel_.get(), cq, rpcmethod_AddRoute_, context, request, false);
}

Beta::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Beta_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Beta::Service, ::betagrpc::RouteQuery, ::betagrpc::Route>(
          std::mem_fn(&Beta::Service::GetRoute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Beta_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Beta::Service, ::betagrpc::RouteQuery, ::betagrpc::Route>(
          std::mem_fn(&Beta::Service::MustGetRoute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Beta_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Beta::Service, ::betagrpc::Route, ::betagrpc::AddResponse>(
          std::mem_fn(&Beta::Service::AddRoute), this)));
}

Beta::Service::~Service() {
}

::grpc::Status Beta::Service::GetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Beta::Service::MustGetRoute(::grpc::ServerContext* context, const ::betagrpc::RouteQuery* request, ::betagrpc::Route* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Beta::Service::AddRoute(::grpc::ServerContext* context, const ::betagrpc::Route* request, ::betagrpc::AddResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace betagrpc

